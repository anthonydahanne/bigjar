plugins {
  id 'org.springframework.boot' version '2.6.6'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'java'
  id 'jacoco'
}

apply plugin: 'java'

group = 'org.springframework.samples'
version = '2.6.0'
sourceCompatibility = '11'

repositories {
  mavenCentral()
}

ext.webjarsFontawesomeVersion = "4.7.0"
ext.webjarsBootstrapVersion = "5.1.3"

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-cache'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'javax.cache:cache-api'
  runtimeOnly 'org.springframework.boot:spring-boot-starter-actuator'
  runtimeOnly 'org.webjars:webjars-locator-core'
  runtimeOnly "org.webjars.npm:bootstrap:${webjarsBootstrapVersion}"
  runtimeOnly "org.webjars.npm:font-awesome:${webjarsFontawesomeVersion}"
  runtimeOnly 'org.ehcache:ehcache'
  runtimeOnly 'com.h2database:h2'
  runtimeOnly 'mysql:mysql-connector-java'
  runtimeOnly 'org.postgresql:postgresql'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

jar {
  enabled = false
}

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

test {
    useJUnitPlatform()
}

task installFrontend(type: Exec) {
    inputs.file(file("frontend/yarn.lock"))
    inputs.file(file("frontend/package.json"))
    outputs.dir(file("frontend/node_modules"))
    commandLine("yarn", "--cwd", "frontend", "install")
}

task buildFrontend(type: Exec) {
    dependsOn("installFrontend")
    inputs.dir(file("frontend"))
    outputs.dir(file("frontend/build"))
    commandLine("yarn", "--cwd", "frontend", "build")
}

task copyFrontend(type: Sync) {
    dependsOn("buildFrontend")
    from(file("./frontend/build"))
    into(file("$buildDir/resources/main/static"))
    doLast {
        println("copied built frontend to static resources")
    }
}

task copyFrontendForIntelliJ(type: Sync) {
    dependsOn("buildFrontend")
    from(file("./frontend/build"))
    into(file("./src/main/resources/static"))
    doLast {
        println("copied built frontend to static resources")
    }
}

task cleanFrontend(type: Delete) {
    delete(file("./frontend/build"))
    delete(file("./src/main/resources/static"))
}

task showRepositories {
    repositories.each {
        println "repository: ${it.name} ('${it.url}')"
    }
}

bootJar {
    dependsOn(copyFrontend)
}

bootRun {
    dependsOn(copyFrontend)
}

clean {
    dependsOn(cleanFrontend)
}

jacocoTestReport {
    dependsOn(test)
    reports {
        xml.enabled = true
    }
}